{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stealthereum",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSwapOutput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMsgValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "schemeId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stealthAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "ephemeralPubkey",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "viewTag",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "extraMetadata",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapPayload",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nativeTransfer",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStealthSwapHelper.StealthSwap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "name": "stealthSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "schemeId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stealthAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "ephemeralPubkey",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "viewTag",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "extraMetadata",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapPayload",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nativeTransfer",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStealthSwapHelper.StealthSwap",
          "name": "swap",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "schemeId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stealthAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "ephemeralPubkey",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "viewTag",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "extraMetadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStealthereum.StealthTransfer",
          "name": "transferData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "transferValueETH",
          "type": "uint256"
        }
      ],
      "name": "stealthSwapAndBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stealthereum",
      "outputs": [
        {
          "internalType": "contract IStealthereum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbe7825eb9c7178d43a3791a1c27377070c3fce71d27ec501c41b1fabe68df1da",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1242779",
    "logsBloom": "0x
    "blockHash": "0x151c915f158abbd8ec6291994acd120f58b3d8b7ace721047069ba9408f7c41e",
    "transactionHash": "0xbe7825eb9c7178d43a3791a1c27377070c3fce71d27ec501c41b1fabe68df1da",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "1242779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "438892de241e969885cedeeeb80c8021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stealthereum\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"schemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stealthAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ephemeralPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"viewTag\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"extraMetadata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nativeTransfer\",\"type\":\"uint256\"}],\"internalType\":\"struct IStealthSwapHelper.StealthSwap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"stealthSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"schemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stealthAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ephemeralPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"viewTag\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"extraMetadata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nativeTransfer\",\"type\":\"uint256\"}],\"internalType\":\"struct IStealthSwapHelper.StealthSwap\",\"name\":\"swap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"schemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stealthAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ephemeralPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"viewTag\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"extraMetadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IStealthereum.StealthTransfer\",\"name\":\"transferData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferValueETH\",\"type\":\"uint256\"}],\"name\":\"stealthSwapAndBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stealthereum\",\"outputs\":[{\"internalType\":\"contract IStealthereum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"mrs kzg.eth\",\"kind\":\"dev\",\"methods\":{\"stealthSwap((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256))\":{\"params\":{\"swap\":\"a struct containing swap info and stealth transfer info, see StealthSwap struct.\"}},\"stealthSwapAndBatch((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256),(uint256,address,bytes,uint8,address[],uint256[],bytes),uint256)\":{\"details\":\"Meant for doing a stealth swap and then clearing the rest of the used stealth address to a new \\\"change address\\\" all in one batched op\",\"params\":{\"swap\":\"a struct containing swap info and stealth transfer info, see StealthSwap struct.\",\"transferData\":\"a struct containing stealth transfer params, see StealthTransfer struct.\",\"transferValueETH\":\"amount of native token to send in the second stealth transfer.\"}}},\"title\":\"Stealth Swap Helper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"stealthSwap((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256))\":{\"notice\":\"swap ETH or an ERC20 into an ERC20 before sending it to a stealth address\"},\"stealthSwapAndBatch((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256),(uint256,address,bytes,uint8,address[],uint256[],bytes),uint256)\":{\"notice\":\"batch a stealth swap operation with a second stealth transfer\"}},\"notice\":\"router contract for performing an ERC20 token swap before sending the result of the swap to a stealth address\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StealthSwapHelper.sol\":\"StealthSwapHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StealthSwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IToken} from \\\"./interfaces/IToken.sol\\\";\\nimport {\\n    IStealthSwapHelper,\\n    IStealthereum\\n} from \\\"./interfaces/IStealthSwapHelper.sol\\\";\\n\\n/// @title Stealth Swap Helper\\n/// @author mrs kzg.eth\\n/// @notice router contract for performing an ERC20 token swap before sending the result of the swap to a stealth address\\ncontract StealthSwapHelper is IStealthSwapHelper {\\n\\n    error ArrayLengthMismatch();\\n    error NoSwapOutput();\\n    error WrongMsgValue();\\n    error SwapCallFailed();\\n\\n    address internal ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    IStealthereum public immutable stealthereum;\\n\\n    constructor(address _stealthereum) {\\n        stealthereum = IStealthereum(_stealthereum);\\n    }\\n\\n    /// @inheritdoc IStealthSwapHelper\\n    function stealthSwap(\\n        StealthSwap calldata swap\\n    ) external payable {\\n        uint256 value;\\n        if (swap.inputToken == ETH) {\\n            if (swap.inputAmount + swap.nativeTransfer != msg.value) revert WrongMsgValue();\\n            value = swap.inputAmount;\\n        } else {\\n            IToken(swap.inputToken).transferFrom(msg.sender, address(this), swap.inputAmount);\\n            IToken(swap.inputToken).approve(swap.swapRouter, swap.inputAmount);\\n        }\\n        \\n        (bool success,) = swap.swapRouter.call{value: value}(swap.swapPayload);\\n        if (!success) revert SwapCallFailed();\\n\\n        uint256 outputAmount = IToken(swap.outputToken).balanceOf(address(this));\\n        if (outputAmount == 0) revert NoSwapOutput();\\n\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = swap.outputToken;\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = outputAmount;\\n\\n        IToken(swap.outputToken).approve(address(stealthereum), outputAmount);\\n\\n        stealthereum.stealthTransfer{value: swap.nativeTransfer}(\\n            IStealthereum.StealthTransfer({\\n                schemeId: swap.schemeId,\\n                stealthAddress: swap.stealthAddress,\\n                ephemeralPubkey: swap.ephemeralPubkey,\\n                viewTag: swap.viewTag,\\n                tokens: tokens,\\n                values: values,\\n                extraMetadata: swap.extraMetadata\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IStealthSwapHelper\\n    function stealthSwapAndBatch(\\n        StealthSwap calldata swap,\\n        IStealthereum.StealthTransfer calldata transferData,\\n        uint256 transferValueETH\\n    ) external payable {\\n        uint256 swapValue;\\n        if (swap.inputToken == ETH) {\\n            if (swap.inputAmount + swap.nativeTransfer + transferValueETH != msg.value) revert WrongMsgValue();\\n            swapValue = swap.inputAmount;\\n        } else {\\n            IToken(swap.inputToken).transferFrom(msg.sender, address(this), swap.inputAmount);\\n            IToken(swap.inputToken).approve(swap.swapRouter, swap.inputAmount);\\n        }\\n        \\n        (bool success,) = swap.swapRouter.call{value: swapValue}(swap.swapPayload);\\n        if (!success) revert SwapCallFailed();\\n\\n        uint256 outputAmount = IToken(swap.outputToken).balanceOf(address(this));\\n        if (outputAmount == 0) revert NoSwapOutput();\\n\\n        for (uint256 i = 0; i < transferData.tokens.length; i++) {\\n            address token = transferData.tokens[i];\\n            uint256 v = transferData.values[i];\\n            IToken(token).transferFrom(msg.sender, address(this), v);\\n            IToken(token).approve(address(stealthereum), v);\\n        }\\n\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = swap.outputToken;\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = outputAmount;\\n\\n        IStealthereum.StealthTransfer[] memory transfersData = new IStealthereum.StealthTransfer[](2);\\n        transfersData[0] = IStealthereum.StealthTransfer({\\n            schemeId: swap.schemeId,\\n            stealthAddress: swap.stealthAddress,\\n            ephemeralPubkey: swap.ephemeralPubkey,\\n            viewTag: swap.viewTag,\\n            tokens: tokens,\\n            values: values,\\n            extraMetadata: swap.extraMetadata\\n        });\\n        transfersData[1] = transferData;\\n\\n        uint256[] memory msgvalues = new uint256[](2);\\n        msgvalues[0] = swap.nativeTransfer;\\n        msgvalues[1] = transferValueETH;\\n\\n        IToken(swap.outputToken).approve(address(stealthereum), outputAmount);\\n\\n        stealthereum.batchStealthTransfers{value: swap.nativeTransfer+transferValueETH}(\\n            transfersData,\\n            msgvalues\\n        );\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x087b7bde88aa8f3442b9628d338923c4e66b5a6cf0efc690da1bd35576126db4\",\"license\":\"MIT\"},\"contracts/interfaces/IStealthSwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IStealthereum} from \\\"./IStealthereum.sol\\\";\\n\\ninterface IStealthSwapHelper {\\n    /// @notice The StealthSwap struct\\n    /// @param schemeId id for the stealth address cryptographic scheme (1 = secp256k1 with view tags)\\n    /// @param stealthAddress the stealth address to transfer to\\n    /// @param ephemeralPubkey the ephemeral pubkey used to create the stealth address (and used by recipient to find the private key)\\n    /// @param viewTag the view tag for quicker scanning\\n    /// @param extraMetadata any extra data to append to the metadata\\n    /// @param inputToken input token address, for swap (use 0xeeee....) for native ETH\\n    /// @param inputAmount amount of inputToken to swap\\n    /// @param outputToken address of output token for swap\\n    /// @param swapRouter target contract to call for swap action\\n    /// @param swapPayload to call on target contract for swap action\\n    /// @param nativeTransfer amount of native ETH to transfer to the stealth address receiving the output of the swap\\n    struct StealthSwap {\\n        uint256 schemeId;\\n        address stealthAddress;\\n        bytes ephemeralPubkey;\\n        uint8 viewTag;\\n        bytes extraMetadata;\\n        address inputToken;\\n        uint256 inputAmount;\\n        address outputToken;\\n        address swapRouter;\\n        bytes swapPayload;\\n        uint256 nativeTransfer;\\n    }\\n\\n    /// @notice swap ETH or an ERC20 into an ERC20 before sending it to a stealth address\\n    /// @param swap a struct containing swap info and stealth transfer info, see StealthSwap struct.\\n    function stealthSwap(\\n        StealthSwap calldata swap\\n    ) external payable;\\n\\n    /// @notice batch a stealth swap operation with a second stealth transfer\\n    /// @param swap a struct containing swap info and stealth transfer info, see StealthSwap struct.\\n    /// @param transferData a struct containing stealth transfer params, see StealthTransfer struct.\\n    /// @param transferValueETH amount of native token to send in the second stealth transfer.\\n    /// @dev Meant for doing a stealth swap and then clearing the rest of the used stealth address to a new \\\"change address\\\" all in one batched op\\n    function stealthSwapAndBatch(\\n        StealthSwap calldata swap,\\n        IStealthereum.StealthTransfer calldata transferData,\\n        uint256 transferValueETH\\n    ) external payable;\\n    \\n}\",\"keccak256\":\"0xddb09d0df7c1c997fae1697e658cf4d0a890156c33eba1b471db7b846a750f84\",\"license\":\"MIT\"},\"contracts/interfaces/IStealthereum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IStealthereum {\\n\\n    error WrongMsgValue();\\n    error MalformattedMetadata();\\n    error NativeTransferFailed();\\n    error ArrayLengthMismatch();\\n\\n    /// @notice The StealthTransfer struct\\n    /// @param schemeId id for the stealth address cryptographic scheme (1 = secp256k1 with view tags)\\n    /// @param stealthAddress the stealth address to transfer to\\n    /// @param ephemeralPubkey the ephemeral pubkey used to create the stealth address (and used by recipient to find the private key)\\n    /// @param viewTag the view tag for quicker scanning\\n    /// @param tokens list of tokens to transfer to the stealth address (supports both ERC20 and ERC721)\\n    /// @param values the amount (or tokenId, in the case of ERC721) to transfer per token address\\n    /// @param extraMetadata any extra data to append to the metadata\\n    struct StealthTransfer {\\n        uint256 schemeId; \\n        address stealthAddress;\\n        bytes ephemeralPubkey;\\n        uint8 viewTag;\\n        address[] tokens;\\n        uint256[] values;\\n        bytes extraMetadata;\\n    }\\n\\n    /// @notice stealth transfer native token and/or any number of ERC20 / ERC721 tokens directly to a stealth address on announcement to chain's ERC5564Announcer\\n    /// @param transferData a struct containing stealth transfer params, see StealthTransfer struct\\n    /// @dev Caller must approve `values[i]` for each `tokens[i]` contract before invoking this function.\\n    /// This function will properly encode metadata on your behalf complying with ERC5564 spec and extending it.\\n    /// Any non-zero msg.value will be transferred to the stealth address too.\\n    function stealthTransfer(\\n        StealthTransfer calldata transferData\\n    ) external payable;\\n\\n    /// @notice stealth transfers to multiple stealth addresses in one batched call\\n    /// @param transfersData list of structs containing containing stealth transfer params, see StealthTransfer struct\\n    /// @param msgvalues native transfer amounts per StealthTransfer\\n    /// @dev Caller must approve `values[i]` for each `tokens[i]` contract (in each StealthTransfer) before invoking this function.\\n    /// This function will properly encode metadata on your behalf compying with ERC5564 suggestions.\\n    function batchStealthTransfers(\\n        StealthTransfer[] calldata transfersData,\\n        uint256[] calldata msgvalues\\n    ) external payable;\\n\\n    /// @notice parse metadata to check for valid formatting and what transfers it encodes\\n    /// @param metadata the bytes of metadata to parse\\n    /// @return valueETH amount of native ETH transferred\\n    /// @return tokens list of token transfers\\n    /// @return values values transferred in token transfers\\n    /// @return extraDataLen length of custom extra data appended to the standard metadata format\\n    /// @dev METADATA SPEC: the first (n)(56)+1 bytes of metadata MUST conform to the following format (where `n` is number of native or token transfers).\\n    /// First byte MUST be a view tag (if no view tag, can be any arbitrary byte but should be 0x00).\\n    /// IF forwarding the native token (e.g. ETH) next 56 bytes MUST be 24 bytes of 0xee + 32 byte uint matching msg.value.\\n    /// Next 56 byte chunks MAY start with 0x23b872dd (transferFrom) to be considered a token transfer.\\n    /// These token transfer 56 byte chunks go 0x23b872dd + 20 byte token address + 32 byte uint of amount/tokenId to transfer.\\n    /// Once the start of a 56 byte chunk does not start with 0x23b872dd, we consider this unstructured appended data.\\n    function parseMetadata(\\n        bytes memory metadata\\n    ) external pure returns (uint256 valueETH, address[] memory tokens, uint256[] memory values, uint256 extraDataLen);\\n\\n    /// @notice encode metadata from the list of transfers and any \\\"extra\\\" appended metadata\\n    /// @param msgvalue amount of native eth transferred\\n    /// @param viewTag view tag for the stealth transfer\\n    /// @param tokens list of token addresses (ERC20 or ERC721)\\n    /// @param values list of values transferred per token\\n    /// @param extraMetadata any extra data that sender wants to append to the metadata\\n    /// @return metadata the encoded metadata output\\n    function getMetadata(\\n        uint256 msgvalue,\\n        uint8 viewTag,\\n        address[] calldata tokens,\\n        uint256[] calldata values,\\n        bytes memory extraMetadata\\n    ) external pure returns (bytes memory metadata);\\n}\",\"keccak256\":\"0xe24c3301cfb38df529887b7de6714ac865a0966b9f1289090052ceb548986b83\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IToken {\\n    function transferFrom(address, address, uint256) external;\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function approve(address, uint256) external;\\n}\",\"keccak256\":\"0xe57d037b73ef7658550f1348f67f34f926aaecc0239305ec065e3b0024d095e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600080546001600160a01b03191673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee17905534801561003657600080fd5b506040516115ed3803806115ed83398101604081905261005591610066565b6001600160a01b0316608052610096565b60006020828403121561007857600080fd5b81516001600160a01b038116811461008f57600080fd5b9392505050565b60805161151a6100d360003960008181606b0152818161043d015281816104ac015281816109d801528181610d250152610d94015261151a6000f3fe6080604052600436106100385760003560e01c8063139f20f414610044578063272e9c8614610059578063a4559b70146100a957600080fd5b3661003f57005b600080fd5b610057610052366004610e48565b6100bc565b005b34801561006557600080fd5b5061008d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100576100b7366004610e85565b610620565b600080546001600160a01b03166100d960c0840160a08501610f14565b6001600160a01b03160361012457346100fb61014084013560c0850135610f36565b1461011957604051633bf87c3160e11b815260040160405180910390fd5b5060c0810135610234565b61013460c0830160a08401610f14565b6040516323b872dd60e01b815233600482015230602482015260c084013560448201526001600160a01b0391909116906323b872dd90606401600060405180830381600087803b15801561018757600080fd5b505af115801561019b573d6000803e3d6000fd5b506101b09250505060c0830160a08401610f14565b6001600160a01b031663095ea7b36101d061012085016101008601610f14565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260c08501356024820152604401600060405180830381600087803b15801561021b57600080fd5b505af115801561022f573d6000803e3d6000fd5b505050505b600061024861012084016101008501610f14565b6001600160a01b031682610260610120860186610f5d565b60405161026e929190610fab565b60006040518083038185875af1925050503d80600081146102ab576040519150601f19603f3d011682016040523d82523d6000602084013e6102b0565b606091505b50509050806102d15760405162e902f160e21b815260040160405180910390fd5b60006102e4610100850160e08601610f14565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a08231906024016020604051808303816000875af115801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190610fbb565b90508060000361037357604051635ce1128760e11b815260040160405180910390fd5b604080516001808252818301909252600091602080830190803683370190505090506103a6610100860160e08701610f14565b816000815181106103b9576103b9610fea565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050828160008151811061040a5761040a610fea565b6020908102919091010152610426610100870160e08801610f14565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201869052919091169063095ea7b390604401600060405180830381600087803b15801561049257600080fd5b505af11580156104a6573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a4df161c8761014001356040518060e001604052808a6000013581526020018a60200160208101906105079190610f14565b6001600160a01b0316815260200161052260408c018c610f5d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161056c60808c0160608d01611011565b60ff168152602081018790526040810186905260600161058f60808c018c610f5d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516001600160e01b031960e085901b1681526105e69190600401611173565b6000604051808303818588803b1580156105ff57600080fd5b505af1158015610613573d6000803e3d6000fd5b5050505050505050505050565b600080546001600160a01b031661063d60c0860160a08701610f14565b6001600160a01b03160361069357348261066061014087013560c0880135610f36565b61066a9190610f36565b1461068857604051633bf87c3160e11b815260040160405180910390fd5b5060c08301356107a3565b6106a360c0850160a08601610f14565b6040516323b872dd60e01b815233600482015230602482015260c086013560448201526001600160a01b0391909116906323b872dd90606401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b5061071f9250505060c0850160a08601610f14565b6001600160a01b031663095ea7b361073f61012087016101008801610f14565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260c08701356024820152604401600060405180830381600087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b505050505b60006107b761012086016101008701610f14565b6001600160a01b0316826107cf610120880188610f5d565b6040516107dd929190610fab565b60006040518083038185875af1925050503d806000811461081a576040519150601f19603f3d011682016040523d82523d6000602084013e61081f565b606091505b50509050806108405760405162e902f160e21b815260040160405180910390fd5b6000610853610100870160e08801610f14565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a08231906024016020604051808303816000875af115801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190610fbb565b9050806000036108e257604051635ce1128760e11b815260040160405180910390fd5b60005b6108f26080870187611186565b9050811015610a5357600061090a6080880188611186565b8381811061091a5761091a610fea565b905060200201602081019061092f9190610f14565b9050600061094060a0890189611186565b8481811061095057610950610fea565b6040516323b872dd60e01b815233600482015230602482015260209091029290920135604483018190529250506001600160a01b038316906323b872dd90606401600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590528516925063095ea7b39150604401600060405180830381600087803b158015610a2d57600080fd5b505af1158015610a41573d6000803e3d6000fd5b5050600190940193506108e592505050565b5060408051600180825281830190925260009160208083019080368337019050509050610a87610100880160e08901610f14565b81600081518110610a9a57610a9a610fea565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610aeb57610aeb610fea565b602090810291909101015260408051600280825260608201909252600091816020015b610b5a6040518060e001604052806000815260200160006001600160a01b0316815260200160608152602001600060ff1681526020016060815260200160608152602001606081525090565b815260200190600190039081610b0e5750506040805160e0810182528b358152919250602080830191610b9291908d01908d01610f14565b6001600160a01b03168152602001610bad60408c018c610f5d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610bf760808c0160608d01611011565b60ff1681526020810185905260408101849052606001610c1a60808c018c610f5d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508351849250610c6157610c61610fea565b602002602001018190525087610c7690611393565b81600181518110610c8957610c89610fea565b60209081029190910101526040805160028082526060820190925260009181602001602082028036833701905050905089610140013581600081518110610cd257610cd2610fea565b6020026020010181815250508781600181518110610cf257610cf2610fea565b6020908102919091010152610d0e6101008b0160e08c01610f14565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201889052919091169063095ea7b390604401600060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638d0185fb898c6101400135610dd29190610f36565b84846040518463ffffffff1660e01b8152600401610df1929190611476565b6000604051808303818588803b158015610e0a57600080fd5b505af1158015610e1e573d6000803e3d6000fd5b505050505050505050505050505050565b60006101608284031215610e4257600080fd5b50919050565b600060208284031215610e5a57600080fd5b813567ffffffffffffffff811115610e7157600080fd5b610e7d84828501610e2f565b949350505050565b600080600060608486031215610e9a57600080fd5b833567ffffffffffffffff80821115610eb257600080fd5b610ebe87838801610e2f565b94506020860135915080821115610ed457600080fd5b50840160e08187031215610ee757600080fd5b929592945050506040919091013590565b80356001600160a01b0381168114610f0f57600080fd5b919050565b600060208284031215610f2657600080fd5b610f2f82610ef8565b9392505050565b80820180821115610f5757634e487b7160e01b600052601160045260246000fd5b92915050565b6000808335601e19843603018112610f7457600080fd5b83018035915067ffffffffffffffff821115610f8f57600080fd5b602001915036819003821315610fa457600080fd5b9250929050565b8183823760009101908152919050565b600060208284031215610fcd57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b803560ff81168114610f0f57600080fd5b60006020828403121561102357600080fd5b610f2f82611000565b6000815180845260005b8181101561105257602081850181015186830182015201611036565b506000602082860101526020601f19601f83011685010191505092915050565b60008151808452602080850194506020840160005b838110156110a357815187529582019590820190600101611087565b509495945050505050565b80518252600060208083015160018060a01b03808216838701526040850151915060e060408701526110e360e087018361102c565b60608681015160ff169088015260808087015188830391890191909152805180835290850193506000918501905b8083101561113357845184168252938501936001929092019190850190611111565b5060a0870151945087810360a089015261114d8186611072565b94505050505060c083015184820360c086015261116a828261102c565b95945050505050565b602081526000610f2f60208301846110ae565b6000808335601e1984360301811261119d57600080fd5b83018035915067ffffffffffffffff8211156111b857600080fd5b6020019150600581901b3603821315610fa457600080fd5b60405160e0810167ffffffffffffffff811182821017156111f3576111f3610fd4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561122257611222610fd4565b604052919050565b600082601f83011261123b57600080fd5b813567ffffffffffffffff81111561125557611255610fd4565b611268601f8201601f19166020016111f9565b81815284602083860101111561127d57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156112b4576112b4610fd4565b5060051b60200190565b600082601f8301126112cf57600080fd5b813560206112e46112df8361129a565b6111f9565b8083825260208201915060208460051b87010193508684111561130657600080fd5b602086015b848110156113295761131c81610ef8565b835291830191830161130b565b509695505050505050565b600082601f83011261134557600080fd5b813560206113556112df8361129a565b8083825260208201915060208460051b87010193508684111561137757600080fd5b602086015b84811015611329578035835291830191830161137c565b600060e082360312156113a557600080fd5b6113ad6111d0565b823581526113bd60208401610ef8565b6020820152604083013567ffffffffffffffff808211156113dd57600080fd5b6113e93683870161122a565b60408401526113fa60608601611000565b6060840152608085013591508082111561141357600080fd5b61141f368387016112be565b608084015260a085013591508082111561143857600080fd5b61144436838701611334565b60a084015260c085013591508082111561145d57600080fd5b5061146a3682860161122a565b60c08301525092915050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156114cd57605f198887030185526114bb8683516110ae565b9550938201939082019060010161149f565b5050505050828103602084015261116a818561107256fea264697066735822122062df7e8863a488c6a6c749f2457c1c6c764ceda4b40fde2d94da056618884c1064736f6c63430008160033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "mrs kzg.eth",
    "kind": "dev",
    "methods": {
      "stealthSwap((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256))": {
        "params": {
          "swap": "a struct containing swap info and stealth transfer info, see StealthSwap struct."
        }
      },
      "stealthSwapAndBatch((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256),(uint256,address,bytes,uint8,address[],uint256[],bytes),uint256)": {
        "details": "Meant for doing a stealth swap and then clearing the rest of the used stealth address to a new \"change address\" all in one batched op",
        "params": {
          "swap": "a struct containing swap info and stealth transfer info, see StealthSwap struct.",
          "transferData": "a struct containing stealth transfer params, see StealthTransfer struct.",
          "transferValueETH": "amount of native token to send in the second stealth transfer."
        }
      }
    },
    "title": "Stealth Swap Helper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "stealthSwap((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256))": {
        "notice": "swap ETH or an ERC20 into an ERC20 before sending it to a stealth address"
      },
      "stealthSwapAndBatch((uint256,address,bytes,uint8,bytes,address,uint256,address,address,bytes,uint256),(uint256,address,bytes,uint8,address[],uint256[],bytes),uint256)": {
        "notice": "batch a stealth swap operation with a second stealth transfer"
      }
    },
    "notice": "router contract for performing an ERC20 token swap before sending the result of the swap to a stealth address",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20,
        "contract": "contracts/StealthSwapHelper.sol:StealthSwapHelper",
        "label": "ETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}